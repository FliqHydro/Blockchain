import "../stylesheets/app.css";

import { default as Web3} from 'web3';
import { default as contract } from 'truffle-contract'

import shark_artifacts from '../../build/contracts/Shark.json'
import shark_race_artifacts from '../../build/contracts/SharkRace.json'
import shark_ownership_artifacts from '../../build/contracts/SharkOwnership.json'

var Shark = contract(shark_artifacts);
var SharkRace = contract(shark_race_artifacts);
var SharkOwnership = contract(shark_ownership_artifacts);

// The following code is simple to show off interacting with your contracts.
// As your needs grow you will likely need to change its form and structure.
// For application bootstrapping, check out window.addEventListener below.
var accounts;
var account;

window.App = {
  start: function() {
    var self = this;

    Shark.setProvider(web3.currentProvider);
    SharkRace.setProvider(web3.currentProvider);
    SharkOwnership.setProvider(web3.currentProvider);

    // Get the initial account balance so it can be displayed.
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        console.error("There was an error fetching your accounts.");
        return;
      }

      if (accs.length == 0) {
        console.error("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
        return;
      }

      accounts = accs;
      account = accounts[0];

      self.setEventHandlers();
    });
  },

  setEventHandlers: function() {
    var self = this;

    // Creating a basic shark from the index page
    $("#basicShark").click(function(e) {
      var shark
      console.dir(Shark)
      Shark.deployed().then((instance) => {
        shark = instance;
        console.log('Shark instance');
        console.dir(shark);

        return shark.createBasicShark({from: account})
        console.log('creating basic shark')
      }).then((data) => {
        console.dir(data)
        alert('Shark created');
      }).catch((e) => {
        console.error(e)
        alert('There was an error');
      })
    })

  },

};

window.addEventListener('load', function() {
  // Checking if Web3 has been injected by the browser (Mist/MetaMask)
  if (typeof web3 !== 'undefined') {
    console.warn("Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask")
    // Use Mist/MetaMask's provider
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn("No web3 detected. Falling back to http://127.0.0.1:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask");
    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    window.web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:9545"));
  }

  App.start();
});


// CryptoZombies front end code
// // Here's how we would access our contract:
// var abi = /* abi generated by the compiler */
// var ZombieFactoryContract = web3.eth.contract(abi)
// var contractAddress = /* our contract address on Ethereum after deploying */
// var ZombieFactory = ZombieFactoryContract.at(contractAddress)
// // `ZombieFactory` has access to our contract's public functions and events

// // some sort of event listener to take the text input:
// $("#ourButton").click(function(e) {
//   var name = $("#nameInput").val()
//   // Call our contract's `createRandomZombie` function:
//   ZombieFactory.createRandomZombie(name)
// })

// // Listen for the `NewZombie` event, and update the UI
// var event = ZombieFactory.NewZombie(function(error, result) {
//   if (error) return
//   generateZombie(result.zombieId, result.name, result.dna)
// })

// // take the Zombie dna, and update our image
// function generateZombie(id, name, dna) {
//   let dnaStr = String(dna)
//   // pad DNA with leading zeroes if it's less than 16 characters
//   while (dnaStr.length < 16)
//     dnaStr = "0" + dnaStr

//   let zombieDetails = {
//     // first 2 digits make up the head. We have 7 possible heads, so % 7
//     // to get a number 0 - 6, then add 1 to make it 1 - 7. Then we have 7
//     // image files named "head1.png" through "head7.png" we load based on
//     // this number:
//     headChoice: dnaStr.substring(0, 2) % 7 + 1,
//     // 2nd 2 digits make up the eyes, 11 variations:
//     eyeChoice: dnaStr.substring(2, 4) % 11 + 1,
//     // 6 variations of shirts:
//     shirtChoice: dnaStr.substring(4, 6) % 6 + 1,
//     // last 6 digits control color. Updated using CSS filter: hue-rotate
//     // which has 360 degrees:
//     skinColorChoice: parseInt(dnaStr.substring(6, 8) / 100 * 360),
//     eyeColorChoice: parseInt(dnaStr.substring(8, 10) / 100 * 360),
//     clothesColorChoice: parseInt(dnaStr.substring(10, 12) / 100 * 360),
//     zombieName: name,
//     zombieDescription: "A Level 1 CryptoZombie",
//   }
//   return zombieDetails
// }


// Chapter 2 Zombie
// var abi = /* abi generated by the compiler */
// var ZombieFeedingContract = web3.eth.contract(abi)
// var contractAddress = /* our contract address on Ethereum after deploying */
// var ZombieFeeding = ZombieFeedingContract.at(contractAddress)

// // Assuming we have our zombie's ID and the kitty ID we want to attack
// let zombieId = 1;
// let kittyId = 1;

// // To get the CryptoKitty's image, we need to query their web API. This
// // information isn't stored on the blockchain, just their webserver.
// // If everything was stored on a blockchain, we wouldn't have to worry
// // about the server going down, them changing their API, or the company 
// // blocking us from loading their assets if they don't like our zombie game ;)
// let apiUrl = "https://api.cryptokitties.co/kitties/" + kittyId
// $.get(apiUrl, function(data) {
//   let imgUrl = data.image_url
//   // do something to display the image
// })

// // When the user clicks on a kitty:
// $(".kittyImage").click(function(e) {
//   // Call our contract's `feedOnKitty` method
//   ZombieFeeding.feedOnKitty(zombieId, kittyId)
// })

// // Listen for a NewZombie event from our contract so we can display it:
// ZombieFactory.NewZombie(function(error, result) {
//   if (error) return
//   // This function will display the zombie, like in lesson 1:
//   generateZombie(result.zombieId, result.name, result.dna)
// })
